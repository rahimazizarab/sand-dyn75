hercules@pjjrpiz ~/hercules-3.11 $ diff general2_3.11_ORIGINAL.c general2.c -C 10
   *** general2_3.11_ORIGINAL.c    2014-06-14 22:18:06.000000000 +0200
   --- general2.c  2015-05-12 11:00:32.113042174 +0200
   ***************
   *** 1404,1423 ****
   --- 1404,1435 ----
         /* Get operand absolute address */
         main2 = MADDR (effective_addr2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey);
  
         /* Obtain main-storage access lock */
         OBTAIN_MAINLOCK(regs);
  
         /* Get old value */
         old = *main2;
  
         /* Attempt to exchange the values */
   + /*  The WHILE statement that follows could lead to a TS-style lock   */
   + /*  release never being noticed, because such release statements are */
   + /*  implemented using regular instructions such as MVI or even ST    */
   + /*  setting the [most significant bit of the mem_lockbyte] to zero,  */
   + /*  which are NOT being protected using _MAINLOCK.  In the absence   */
   + /*  of a machine assist for "cmpxchg1" it is possible that this      */
   + /*  reset occurs in between the test IF (old == mem_lockbyte) and    */
   + /*  the updating of mem_lockbyte = 255;  As this update in the case  */
   + /*  old == 255 is not needed to start with, we have inserted the     */
   + /*  test IF (old != 255) in front of the original WHILE statement.   */
   + /*                                       (Peter J. Jansen, May 2015) */
   +     if (old != 255)
         while (cmpxchg1(&old, 255, main2));
         regs->psw.cc = old >> 7;
  
         /* Release main-storage access lock */
         RELEASE_MAINLOCK(regs);
  
         /* Perform serialization after completing operation */
         PERFORM_SERIALIZATION (regs);
  
         if (regs->psw.cc == 1)
   hercules@pjjrpiz ~/hercules-3.11 $  

That this only became a problem now is probably due to timing coincidences, coupled with the fact that for ARM processors like in the Raspberry Pi currenty no machine assist for cmpxchg1 exists yet in machdep.h; I'll try to develop one (and for cmpxchg4 and cmpxchg8 also).

I've seen maxrates as high as 5.5 MIPS during z/VM (and z/OS) IPL's on the Raspberry Pi 2 using NUMCPU=4 and MAINSIZE 512 or 800. A z/VM IPL is quite OK as far as speed goes; z/OS (which does not need this fix, it doesn't use the TS instruction I think) needs patience, the IPL time is close to 2 hrs ...

Peter



